#=======================================================================
#@V@:Note: File automatically generated by VIDE: (10:58:13 05 Feb 2002) (g++).
#  This file regenerated each time you run VIDE, so save under a
#    new name if you hand edit, or it will be overwritten.
#=======================================================================

# Target definition:
#TGTROM = 1		# flash rom compil.
TGTROM = 				# simulator compil.

# Standard defines:
##################
# gcc completo...
#	xgcc.exe -c -mv850 -gstabs+ -O0 -mno-prolog-function -v -Wall -mtda=0 -msda=0 -mzda=0 -fshort-enums -freg-struct-return -fshort-double -nostdinc -I /cygdrive/c/gcc850/include -iprefix /cygdrive/c/gcc850/include -iwithprefix /g++ -iwithprefix /g++/std -iwithprefix /g++/v850-elf  main.cpp -o ./obj/main.o -Wa,-ahl > main.lst
##################
# ritagli vari
#	cc1plus.exe -mv850 -gstabs+ -O0 -mno-prolog-function -version -Wall -quiet -mtda=0 -msda=0 -mzda=0 -fshort-enums -freg-struct-return -fshort-double -nostdinc -I /cygdrive/c/gcc850/include -iprefix c:\gcc850\include -iwithprefix \g++ -iwithprefix \g++\std -iwithprefix \g++\v850-elf  main.cpp -o ./src/main.s
#	as.exe -v -mv850 ./src/main.s -o ./obj/main.o -ahl > ./lst/main.lst
# -Wa,-v -Wa,-mv850 -Wa, ./src/main.s -Wa, -o ./obj/main.o -Wa,-ahl > ./lst/main.lst
#	as.exe -mv850 ./src/main.s -o ./obj/main.o -ah > ./lst/main.lst
##################

ASM 	=	asm.bat
LK  	=	lkm.bat
LD  	=	ld.exe

GPP		=	cpp.exe 
GCC		=	cc1plus.exe 
GAS		=	as.exe 


#GASFILE = 	$< -o ./$@
#GPPASFILE = ./src/$(*F).s -o ./$@

#GASFULL = 	$< -o ./$@ -a > ./lst/$(*F).lst
#GPPASFULL=  ./src/$(*F).s -o ./$@ -a > ./lst/$(*F).lst


######################################################################
# Modalità TARGET ovvero codice in rom-microbo
######################################################################
ifdef TGTROM

CC  	=	ccr.bat
CC0		=   ccr0.bat
CCI  	=	cci.bat  
CCV  	=	ccv.bat
#CCO  	=	ccr.bat

GPPOPT	= 	-E -lang-c++ -MM -nostdinc -I c:/gcc850/include -iprefix c:/gcc850/include -undef 

IRQOPT	= 	-mv850 -g -O2 -mprolog-function -fno-exceptions -fno-rtti -fno-enforce-eh-specs -Wreturn-type -mdisable-callt -version -Wall -quiet -mtda=0 -msda=0 -mzda=0 -fshort-enums -freg-struct-return -fshort-double -nostdinc -I c:/gcc850/include -iprefix c:/gcc850/include
GCCOPT	= 	-mv850 -g -O2 -mprolog-function -fno-exceptions -fno-rtti -fno-enforce-eh-specs -Wreturn-type -mdisable-callt -version -Wall -quiet -mtda=0 -msda=0 -mzda=0 -fshort-enums -freg-struct-return -fshort-double -nostdinc -I c:/gcc850/include -iprefix c:/gcc850/include
GASOPT	= 	-mv850 -L -v
LDOPT	= 	-v -T SG2.LKR -warn-common -Map SG2.MAP -L c:\gcc850\lib

######################################################################
# Modalità DEBUG ovvero codice in ram-debug
######################################################################
else

CC  	=	ccm.bat
CC0		=   ccr0.bat
CCI  	=	cci.bat
CCV  	=	ccv.bat
#CCO  	=	cco.bat

GPPOPT	= 	-E -lang-c++ -M -nostdinc -I c:/gcc850/include -iprefix c:/gcc850/include

IRQOPT	= 	-mv850 -g -O1 -mprolog-function -fno-exceptions -fno-rtti -fno-enforce-eh-specs -Wreturn-type -mdisable-callt -Wall -quiet -mtda=0 -msda=0 -mzda=0 -fshort-enums -freg-struct-return -fshort-double -nostdinc -I c:/gcc850/include -iprefix c:/gcc850/include
GCCOPT	= 	-mv850 -g -O1 -mno-prolog-function -fno-exceptions -fno-rtti -fno-enforce-eh-specs -Wreturn-type -mdisable-callt -Wall -quiet -mtda=0 -msda=0 -mzda=0 -fshort-enums -freg-struct-return -fshort-double -nostdinc -I c:/gcc850/include -iprefix c:/gcc850/include
GCNOPT	= 	-mv850 -g -O0 -mno-prolog-function -fno-exceptions -fno-rtti -fno-enforce-eh-specs -Wreturn-type -mdisable-callt -Wall -quiet -mtda=0 -msda=0 -mzda=0 -fshort-enums -freg-struct-return -fshort-double -nostdinc -I c:/gcc850/include -iprefix c:/gcc850/include
GASOPT	= 	-mv850 -L 
LDOPT	= 	-v -T SG2.LK -warn-common -Map SG2.MAP -L c:\gcc850\lib

endif

######################################################################
# Fine selezione opzioni 
######################################################################

WRES	=	windres

HOMEV	=
VPATH	=	$(HOMEV)/include
oDir	=	./obj
Bin	=	.
Src	=	.
libDirs	=	-L c:\gcc\lib
incDirs	=
LIBS	=
C_FLAGS	=


ASRC	=\
	$(Src)/STARTUP.S\
	$(Src)/CRT0.S\

CDEPS	=\
	$(oDir)/MAIN.d\

CSRC	=\
	$(Src)/CRT1.CPP\
	$(Src)/MAIN.CPP\
	$(Src)/IRQSG2.CPP\
	$(Src)/ALLOC.CPP\
	$(Src)/NEW.CPP\
	$(Src)/STRCLASS.CPP\
	$(Src)/SWTIM.CPP\
	$(Src)/UTIL.CPP\
	$(Src)/I2C_SW.CPP\
	$(Src)/I2Ceeprom.CPP\
	$(Src)/sioSG2.CPP\
	$(Src)/SOUND.CPP\
	$(Src)/ADC.CPP\
	$(Src)/PWM.CPP\
	$(Src)/QUEUEUART.CPP\
	$(Src)/PROTOCOLSTDUART.CPP\
	$(Src)/PROTOCOLSIFRA.CPP\
	$(Src)/CPUSIFRA_MANAGER.CPP	\
	$(Src)/NVRDRV.CPP\
	$(Src)/LEDS_PANEL.CPP
	
EXOBJS	=\
	$(oDir)/STARTUP.o\
	$(oDir)/CRT0.o\
	$(oDir)/CRT1.o\
	$(oDir)/MAIN.o\
	$(oDir)/IRQSG2.o\
	$(oDir)/ALLOC.o\
	$(oDir)/NEW.o\
	$(oDir)/STRCLASS.o\
	$(oDir)/SWTIM.o\
	$(oDir)/UTIL.o\
	$(oDir)/I2C_SW.o\
	$(oDir)/I2Ceeprom.o\
	$(oDir)/sioSG2.o\
	$(oDir)/SOUND.o\
	$(oDir)/ADC.o\
	$(oDir)/PWM.o\
	$(oDir)/QUEUEUART.o\
	$(oDir)/PROTOCOLSTDUART.o\
	$(oDir)/PROTOCOLSIFRA.o\
	$(oDir)/CPUSIFRA_MANAGER.o\
	$(oDir)/NVRDRV.o\
	$(oDir)/LEDS_PANEL.o

ALLOBJS	=	$(EXOBJS) 

ALLBIN	=	$(Bin)/SG2.OUT
ALLTGT	=	$(Bin)/SG2.OUT

# User defines:


#@# Targets follow ---------------------------------

all:	$(ALLTGT)

objs:	$(ALLOBJS) $(CDEPS)

cleanobjs:
	rm -f $(ALLOBJS)


# Automatically generate C source code dependencies. 
# (Code originally taken from the GNU make user manual and modified (See README.txt Credits).)
# Note that this will work with sh (bash) and sed that is shipped with WinAVR (see the SHELL variable defined above).
# This may not work with other shells or other seds.
cleanbin:
	rm -f $(ALLBIN)

clean:	cleanobjs cleanbin

cleanall:	cleanobjs cleanbin

#@# User Targets follow ---------------------------------


#@# Dependency rules follow -----------------------------

# File .bin per il loader su scheda
ifdef TGTROM

$(Bin)/SG2.OUT: $(EXOBJS) SG2.LKR SG2.MAK
	$(LK) SG2.LKR SG2.MAP
#	$(LD) $(LDOPT)
	objcopy -v -I elf32-v850 -O binary -x SG2.OUR M3300_v4.XX.BIN
	size --target=elf32-v850 SG2.OUR
	
else

# File .out con simboli per simulatore
$(Bin)/SG2.OUT: $(EXOBJS) SG2.LK SG2.MAK
#	$(LK) SG2.LK SG2.MAP
	$(LD) $(LDOPT)
	size --target=elf32-v850 SG2.OUT
	objcopy -v -I elf32-v850 -O binary -x SG2.OUT SG2.BIN
	objcopy -v -I elf32-v850 -O srec -x SG2.OUT SG2.REC
endif


$(oDir)/STARTUP.o : STARTUP.S V850SG2.INC
	$(ASM) $(*F)
	
$(oDir)/CRT0.o : CRT0.S
	$(ASM) $(*F) 

# Compile: create object files from C source files.
#$(oDir)/%.d: %.CPP
#	$(GPP) 	$(GPPOPT) $< -o $@ 

$(oDir)/CRT1.o : CRT1.CPP
	$(CC)  $(*F)

$(oDir)/MAIN.o : MAIN.CPP global.h v850sg2.h main.h
	$(CC)  $(*F)

$(oDir)/IRQSG2.o : IRQSG2.CPP global.h error.h IRQSG2.h
	$(CCI)  $(*F)
	
#$(oDir)/ERROR.o : ERROR.CPP global.h v850sg2.h ERROR.h
#	$(CC)  $(*F)

$(oDir)/ALLOC.o : ALLOC.CPP global.h error.h ALLOC.h
	$(CC)  $(*F)
	
$(oDir)/NEW.o : NEW.CPP global.h v850sg2.h NEW.h
	$(CC)  $(*F)
		
$(oDir)/STRCLASS.o : STRCLASS.CPP global.h v850sg2.h STRCLASS.h
	$(CC)  $(*F)
	
$(oDir)/SWTIM.o : SWTIM.CPP global.h v850sg2.h SWTIM.h
	$(CC)  $(*F)

$(oDir)/UTIL.o : UTIL.CPP global.h v850sg2.h UTIL.h
	$(CC)  $(*F)

$(oDir)/I2C_SW.o : I2C_SW.CPP global.h I2C_SW.h 
	$(CC)  $(*F)	

$(oDir)/I2Ceeprom.o : I2Ceeprom.CPP global.h I2Ceeprom.h 
	$(CC)  $(*F)

$(oDir)/sioSG2.o : sioSG2.CPP global.h sioSG2.h 
	$(CC)  $(*F)		

$(oDir)/SOUND.o : SOUND.CPP global.h SOUND.h 
	$(CC)  $(*F)	

$(oDir)/ADC.o : ADC.CPP global.h ADC.h 
	$(CC)  $(*F)

#$(oDir)/RTCDRV.o : RTCDRV.CPP global.h rtcdrv.h m48t35.cpp m48t35.h
#	$(CC)  $(*F)

$(oDir)/PWM.o : PWM.CPP global.h PWM.h 
	$(CC)  $(*F)

$(oDir)/QUEUEUART.o : QUEUEUART.CPP global.h QUEUEUART.h
	$(CC)  $(*F)		

$(oDir)/PROTOCOLSTDUART.o : PROTOCOLSTDUART.CPP global.h PROTOCOLSTDUART.h
	$(CC)  $(*F)

$(oDir)/PROTOCOLSIFRA.o : PROTOCOLSIFRA.CPP global.h PROTOCOLSIFRA.h
	$(CC)  $(*F)

$(oDir)/CPUSIFRA_MANAGER.o : CPUSIFRA_MANAGER.CPP global.h CPUSIFRA_MANAGER.h
	$(CC)  $(*F)

$(oDir)/NVRDRV.o : NVRDRV.CPP global.h NVRDRV.h
	$(CC)  $(*F)

$(oDir)/LEDS_PANEL.o : LEDS_PANEL.CPP global.h LEDS_PANEL.h
	$(CC)  $(*F)
	
